
body{
  background-image: rl("https://wallpapercave.com/wp/wp3269330.png");
  background-color: black;
}


h1{
  margin-top: 80px;
  font-size: 1rem;
  border: 10px dotted black;
  font-family: cursive;
}
  .navbar{
    animation: movedown 1s linear 1;
    animation-delay: 1s;
    visibility: hidden;
    animation-fill-mode: forwards;
  }

  @keyframes movedown{
    0%{
      transform: translateY(-100px);
      visibility: visible;
    }
    100%{
        transform: translateY(0);
      visibility: visible;
    }
  }

  .col-md-6{
      
    animation: moveright 1s linear 1;
    animation-delay: 2s;
    visibility: hidden;
    animation-fill-mode: forwards;
  }
  
  @keyframes moveright{
     0%{
      transform: translateX(-100px);
      visibility: visible;
    }
    100%{
        transform: translateX(0);
      visibility: visible;
    }
  }


  .clock{
     
    animation: zoomin 1s linear 1;
    animation-delay: 2s;
    visibility: hidden;
    animation-fill-mode: forwards; 
  }

  
  @keyframes zoomin{
    0%{
     transform:scale(0.5);
     visibility: visible;
   }
   100%{
       transform:scale(1);
     visibility: visible;
   }
 }


 
 .datetime{
     
    animation: zoomout 1s linear 1;
    animation-delay: 3s;
    visibility: hidden;
    animation-fill-mode: forwards; 
  }

  
  @keyframes zoomout{
    0%{
     transform:scale(0.5);
     visibility: visible;
   }
   100%{
       transform:scale(1);
     visibility: visible;
   }
 }



 .text-effect {
  overflow: hidden;
  position: relative;
  filter: contrast(110%) brightness(190%);
}
.neon {
  position: relative;
  background: black;
  color: transparent;
  
}

.neon::before, .neon::after {
  content: attr(data-text);
  color: white;
  filter: blur(0.02em);
  position: absolute;
  top: 0;
  left: 0;
  pointer-events: none;
}
.neon::after {
  mix-blend-mode: difference;
}
.gradient, .spotlight {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  pointer-events: none;
  z-index: 10;
}
.gradient {
  background: linear-gradient(45deg, red, blue);
  mix-blend-mode: multiply;
}
.spotlight {
  animation: light 5s infinite linear;
  background: radial-gradient(circle, white, transparent 25%) 0 0 / 25% 25%, radial-gradient(circle, white, black 25%) 50% 50% / 12.5% 12.5%;
  top: -100%;
  left: -100%;
  mix-blend-mode: color-dodge;
}
@keyframes light {
  100% {
    transform: translate3d(50%, 50%, 0);
  }
}
.neon {
  font: 700 60px 'Lato', sans-serif;
  text-transform: uppercase;
  text-align: center;
  margin: 0 auto;
  margin-top: 45px;
  margin-bottom: px;
}
.neon:focus {
  outline: none;
  border: 1px dotted white;
}


html, body { background: hsl(220, 80%, 8%); }
html { height: 100%; display: flex; }
body { margin: auto;overflow: hidden auto; }

.title {
  position: relative;
  text-align: center;
  transform: translateZ(0);
  transform-style: preserve-3d;
}

.title .text {
  font-family: sans-serif;
  font-weight: 400;
  font-size: calc(20vw / var(--word-total) );
  line-height: 1.0;
}

.title .write .word {
  color: hsl(0, 0%, 80%);
  text-shadow: 0 0 0.1em currentColor;
  transform-style: preserve-3d;
  animation: write linear both;
}

.title .laser {
  position: absolute;
  top: 0;
  left: 0;
  /* To avoid the blur getting masked by the clip-path we had to duplicate the element */
  filter: blur(4px) contrast(10);
  pointer-events: none;
}

.title .laser .word {
  display: inline-block;
}

.title .laser .word {
  color: hsl(0, 100%, 75%);
  text-shadow: 0 0 0.1em currentColor;
  transform: translateZ(5px);
  animation: laser linear both;
}

.title .write .word,
.title .laser .word {
  animation-duration: 20s;
  animation-delay: calc(0.1s + var(--word-index) * 100ms);
  animation-iteration-count: infinite;
}

.title:hover .word {
  animation-play-state: paused;
}

/* .title .text .word,
.title .text .word::before {
  animation-play-state: paused;
  animation-delay: -0.4s;
} */

@keyframes write {
  from, 30% { clip-path: polygon(-20% 0%, -15% 0%, -15% 100%, -20% 100%) }
  70%, to { clip-path: polygon(-15% 0%, 120% 0%, 120% 100%, -15% 100%) }
}

@keyframes laser {
  from, 30% { clip-path: polygon(-20% 0%, -15% 0%, -15% 100%, -20% 100%) }
  70%, to { clip-path: polygon(115% 0%, 120% 0%, 120% 100%, 115% 100%) }
}















































/* Recommended styles for Splitting */
.splitting .word,
.splitting .char {
  display: inline-block;
}

/* Psuedo-element chars */
.splitting .char {
  position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
  content: attr(data-char);
  position: absolute;
  top: 0;
  left: 0;
  visibility: hidden;
  transition: inherit;
  user-select: none;
}

/* Expanded CSS Variables */

.splitting {
  /* The center word index */
  --word-center: calc((var(--word-total) - 1) / 2);

  /* The center character index */
  --char-center: calc((var(--char-total) - 1) / 2);

  /* The center character index */
  --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
  /* Pecent (0-1) of the word's position */
  --word-percent: calc(var(--word-index) / var(--word-total));

  /* Pecent (0-1) of the line's position */
  --line-percent: calc(var(--line-index) / var(--line-total));
}

.splitting .char {
  /* Percent (0-1) of the char's position */
  --char-percent: calc(var(--char-index) / var(--char-total));

  /* Offset from center, positive & negative */
  --char-offset: calc(var(--char-index) - var(--char-center));

  /* Absolute distance from center, only positive */
  --distance: calc(
     (var(--char-offset) * var(--char-offset)) / var(--char-center)
  );

  /* Distance from center where -1 is the far left, 0 is center, 1 is far right */
  --distance-sine: calc(var(--char-offset) / var(--char-center));

  /* Distance from center where 1 is far left/far right, 0 is center */
  --distance-percent: calc((var(--distance) / var(--char-center)));
}